name: C++ CI - Build and Test

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ ci_test3, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Debug - Show project structure
      run: |
        echo "=== Project Structure ==="
        find . -type f -name "*.cpp" -o -name "*.cxx" -o -name "*.cc" -o -name "*.c" -o -name "makefile*" -o -name "Makefile*" -o -name "*.h" -o -name "*.hpp" | sort
        echo "=== Root directory ==="
        ls -la
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ make clang-format python3-pip
        python3 -m pip install cpplint
      
    - name: Create universal Makefile
      run: |
        cat > Makefile << 'EOF'
        # Universal Makefile for C++ CI Testing
        CXX := g++
        CXXFLAGS := -Wall -Wextra -std=c++17 -O0
        TARGET := program
        BUILD_DIR := build
        
        # Auto-detect source files
        CPP_SOURCES := $(wildcard *.cpp) $(wildcard src/*.cpp) $(wildcard *.cxx) $(wildcard *.cc)
        CPP_MAIN := $(wildcard main.cpp Main.cpp MAIN.cpp)
        
        ifeq ($(CPP_MAIN),)
            CPP_MAIN := $(firstword $(CPP_SOURCES))
        endif
        
        .PHONY: all build test clean lint
        
        all: build test
        
        build:
        	@echo "=== Building C++ Project ==="
        	@echo "Found source files: $(CPP_SOURCES)"
        	@echo "Main file: $(CPP_MAIN)"
        	@if [ -z "$(CPP_SOURCES)" ]; then \
        		echo "ERROR: No C++ source files found!"; \
        		exit 1; \
        	fi
        	@mkdir -p $(BUILD_DIR)
        	$(CXX) $(CXXFLAGS) -o $(BUILD_DIR)/$(TARGET) $(CPP_SOURCES)
        	@echo "‚úì Build successful: $(BUILD_DIR)/$(TARGET)"
        
        test:
        	@echo "=== Testing ==="
        	@if [ -f "$(BUILD_DIR)/$(TARGET)" ]; then \
        		echo "‚úì Executable exists"; \
        		echo "File info:"; \
        		file $(BUILD_DIR)/$(TARGET); \
        	else \
        		echo "‚úó Executable not found"; \
        		exit 1; \
        	fi
        
        lint:
        	@echo "=== Code Style Check ==="
        	@for file in $(CPP_SOURCES); do \
        		if [ -f "$$file" ]; then \
        			echo "Linting $$file"; \
        			cpplint --filter=-build/include_subdir,-build/header_guard "$$file" || true; \
        		fi; \
        	done
        
        clean:
        	rm -rf $(BUILD_DIR)
        
        ci: build test lint
        EOF
        
        echo "=== Generated Makefile ==="
        cat Makefile
      
    - name: Run CI tests
      run: |
        echo "=== Running CI Pipeline ==="
        make ci
      
    - name: Verify executable
      run: |
        echo "=== Final Verification ==="
        if [ -f "build/program" ]; then
          echo "‚úÖ SUCCESS: Program built successfully!"
          echo "Executable details:"
          file build/program
          ls -la build/program
        else
          echo "‚ùå FAILED: No executable produced"
          echo "Available files:"
          find . -name "program" -o -name "a.out" -o -name "*.exe"
          exit 1
        fi
      
    - name: Basic code quality check
      run: |
        echo "=== Basic Code Quality ==="
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º—É—Å–æ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if find . -name "*.o" -o -name "*.out" | grep -q .; then
          echo "WARNING: Object files found in repository"
          find . -name "*.o" -o -name "*.out"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for file in *.cpp *.h *.hpp; do
          if [ -f "$file" ]; then
            size=$(wc -l < "$file")
            echo "üìÑ $file: $size lines"
          fi
        done

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Basic security checks
      run: |
        echo "=== Security Checks ==="
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if grep -r "system(" *.cpp *.h 2>/dev/null || true; then
          echo "‚ö†Ô∏è  WARNING: system() calls found"
        fi
        
        if grep -r "strcpy\|sprintf" *.cpp *.h 2>/dev/null || true; then
          echo "‚ö†Ô∏è  WARNING: Unsafe string functions found"
        fi
